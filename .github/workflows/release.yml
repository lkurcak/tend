name: release

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5
      - name: Get the release version from the tag
        if: env.VERSION == ''
        run: echo "VERSION=${{ github.ref_name }}" >> $GITHUB_ENV
      - name: Show the version
        run: |
          echo "version is: $VERSION"
      - name: Check that tag version and Cargo.toml version are the same
        shell: bash
        run: |
          if ! grep -q "version = \"$VERSION\"" Cargo.toml; then
            echo "version does not match Cargo.toml" >&2
            exit 1
          fi
      - name: Create GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release create $VERSION --draft --verify-tag --title $VERSION
    outputs:
      version: ${{ env.VERSION }}

  cargo-publish:
    name: cargo-publish
    needs:
      - create-release
    runs-on: ubuntu-latest
    permissions:
      id-token: write     # Required for OIDC token exchange
    steps:
    - uses: actions/checkout@v5
    - uses: rust-lang/crates-io-auth-action@v1
      id: auth
    - run: cargo publish
      env:
        CARGO_REGISTRY_TOKEN: ${{ steps.auth.outputs.token }}

  build-release:
    name: build-release
    needs:
      - create-release

    strategy:
      fail-fast: false
      matrix:
        include:
        - target: aarch64-apple-darwin
          os: macos-latest
          rustflags: ''
        - target: x86_64-apple-darwin
          os: macos-latest
          rustflags: ''
        - target: aarch64-pc-windows-msvc
          os: windows-latest
          rustflags: '-C target-feature=+crt-static'
        - target: x86_64-pc-windows-msvc
          os: windows-latest
          rustflags: '-C target-feature=+crt-static'
        - target: aarch64-unknown-linux-gnu
          os: ubuntu-latest
          rustflags: ''
        - target: x86_64-unknown-linux-gnu
          os: ubuntu-latest
          rustflags: ''
        - target: x86_64-unknown-linux-musl
          os: ubuntu-latest
          rustflags: ''
        - target: armv7-unknown-linux-gnueabihf
          os: ubuntu-latest
          rustflags: ''
        - target: riscv64gc-unknown-linux-gnu
          os: ubuntu-latest
          rustflags: ''

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Build release binary
        shell: bash
        env:
          RUSTFLAGS: ${{ matrix.rustflags }}

        run: |
          cargo build --verbose --release
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            bin="target/release/tend.exe"
          else
            bin="target/release/tend"
          fi
          echo "BIN=$bin" >> $GITHUB_ENV

      - name: Determine archive name
        shell: bash
        run: |
          version="${{ needs.create-release.outputs.version }}"
          echo "ARCHIVE=tend-$version-${{ matrix.target }}" >> $GITHUB_ENV

      - name: Creating directory for archive
        shell: bash
        run: |
          mkdir -p "$ARCHIVE"/
          cp "$BIN" "$ARCHIVE"/
          cp {README.md,UNLICENSE,LICENSE-MIT} "$ARCHIVE"/

      - name: Build archive (Windows)
        shell: bash
        if: matrix.os == 'windows-latest'
        run: |
          cd "$ARCHIVE"
          7z a "../$ARCHIVE.zip" *
          cd ..
          certutil -hashfile "$ARCHIVE.zip" SHA256 > "$ARCHIVE.zip.sha256"
          echo "ASSET=$ARCHIVE.zip" >> $GITHUB_ENV
          echo "ASSET_SUM=$ARCHIVE.zip.sha256" >> $GITHUB_ENV

      - name: Build archive (Unix)
        shell: bash
        if: matrix.os != 'windows-latest'
        run: |
          tar czf "$ARCHIVE.tar.gz" "$ARCHIVE"
          shasum -a 256 "$ARCHIVE.tar.gz" > "$ARCHIVE.tar.gz.sha256"
          echo "ASSET=$ARCHIVE.tar.gz" >> $GITHUB_ENV
          echo "ASSET_SUM=$ARCHIVE.tar.gz.sha256" >> $GITHUB_ENV

      - name: Upload release archive
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          version="${{ needs.create-release.outputs.version }}"
          #gh release upload "$version" ${{ env.ASSET }} ${{ env.ASSET_SUM }}
          gh release upload "$version" ${{ env.ASSET }}
